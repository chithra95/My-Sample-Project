/**************************************************************************** 
 * Job:             MVBS_APC_DATACOPY                     A5V8BXSQ.AR0001BB * 
 * Description:                                                             * 
 *                                                                          * 
 * Metadata Server: bire-sas94-meta-dev.srv.allianz                         * 
 * Port:            8561                                                    * 
 * Location:        /ETL/tdbpcd/Jobs/MVBS/MVBS_INPUT (DWH & MIS)            * 
 *                                                                          * 
 * Server:          tdbpcd                                A5HYR2NS.AS00001O * 
 *                                                                          * 
 * Source Tables:   MVBS_PARAMETERS -                     A5V8BXSQ.AE0001YF * 
 *                   RESASDWH.MVBS_PARAMETERS                               * 
 *                  MVBS_REF_SEGMENT -                    A5V8BXSQ.AE0001Z2 * 
 *                   RESASDWH.MVBS_REF_SEGMENT                              * 
 *                  MVBS_REF_OUTSST_BUKRS -               A5V8BXSQ.AE0001YZ * 
 *                   RESASDWH.MVBS_REF_OUTSST_BUKRS                         * 
 *                  MIS_APC_DM - RESASDWH.MIS_APC_DM      A5V8BXSQ.AE0001R5 * 
 *                  APC_FS_ACC2HIERARCHY -                A5V8BXSQ.AE0001QZ * 
 *                   RESASDWH.APC_FS_ACC2HIERARCHY                          * 
 *                  MVBS_REF_BC_SEG_CONSUNIT -            A5V8BXSQ.AE0001YU * 
 *                   RESASDWH.MVBS_REF_BC_SEG_CONSUNIT                      * 
 *                  META_APC_S002_GL_ACT_ID -             A5V8BXSQ.AE0001R3 * 
 *                   RESASDWH.META_APC_S002_GL_ACT_ID                       * 
 * Target Table:    MVBS_INPUT_APC -                      A5V8BXSQ.AE0001VR * 
 *                   RESASDWH.MVBS_INPUT_APC                                * 
 *                                                                          * 
 * Generated on:    Tuesday, January 24, 2017 3:32:35 PM IST                * 
 * Generated by:    re00580                                                 * 
 * Version:         SAS Data Integration Studio 4.901                       * 
 ****************************************************************************/ 

/* Generate the process id for job  */ 
%put Process ID: &SYSJOBID;

/* General macro variables  */ 
%let jobID = %quote(A5V8BXSQ.AR0001BB);
%let etls_jobName = %nrquote(MVBS_APC_DATACOPY);
%let etls_userID = %nrquote(re00580);

/* Setup to capture return codes  */ 
%global job_rc trans_rc sqlrc;
%let sysrc = 0;
%let job_rc = 0;
%let trans_rc = 0;
%let sqlrc = 0;
%global etls_stepStartTime; 
/* initialize syserr to 0 */
data _null_; run;

%macro rcSet(error); 
   %if (&error gt &trans_rc) %then 
      %let trans_rc = &error;
   %if (&error gt &job_rc) %then 
      %let job_rc = &error;
%mend rcSet; 

%macro rcSetDS(error); 
   if &error gt input(symget('trans_rc'),12.) then 
      call symput('trans_rc',trim(left(put(&error,12.))));
   if &error gt input(symget('job_rc'),12.) then 
      call symput('job_rc',trim(left(put(&error,12.))));
%mend rcSetDS; 

/* Create metadata macro variables */
%let IOMServer      = %nrquote(tdbpcd);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(ibire-sas94-meta-dev.srv.allianz);

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*---- Start of Pre-Process Code  ----*/ 

/*Call to an initialization macro  */
%mvbsJobInit;
/* runs in parallel to MVBS_MIS_DATACOPY -> updating MVBS_LOG might cause a concurrency problem
%mvbsUpdateLog(subject=&sub,processStep=&etls_jobName,usercset=Y);
*/
/*---- End of Pre-Process Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 

/*==========================================================================* 
 * Step:            Extract                               A5V8BXSQ.AW0003CP * 
 * Transform:       Extract                                                 * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    APC_FS_ACC2HIERARCHY -                A5V8BXSQ.AE0001QZ * 
 *                   RESASDWH.APC_FS_ACC2HIERARCHY                          * 
 * Target Table:    Extract - work.acc2hierarchy          A5V8BXSQ.AQ0001DE * 
 *==========================================================================*/ 

%let transformID = %quote(A5V8BXSQ.AW0003CP);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(RESASDWH.APC_FS_ACC2HIERARCHY); 

%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete acc2hierarchy;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.acc2hierarchy as
      select
         VERSN,
         RACCT,
         L02_FS_TEXT,
         L03_FS_TEXT,
         L04_FS_TEXT
   from &SYSLAST
      where (L02_FS_TEXT LIKE 'P.C.%' or  
          L03_FS_TEXT LIKE 'A.F.1.%' or 
          L03_FS_TEXT LIKE 'P.D.1%' or  
          L03_FS_TEXT LIKE 'P.D.2%' or  
          L03_FS_TEXT LIKE 'P.E.1.%' or
          L04_FS_TEXT LIKE 'A.F.2.a.%' or 
          L04_FS_TEXT LIKE 'A.F.2.b.%' or  
          L04_FS_TEXT LIKE 'A.F.3.a.%' or
          L04_FS_TEXT LIKE 'C.H.1.a.%' or  
          L04_FS_TEXT LIKE 'C.H.2.a.%' or  
          L04_FS_TEXT LIKE 'C.A.1.b.%' or  
          L04_FS_TEXT LIKE 'C.A.1.c.%' or  
          L04_FS_TEXT LIKE 'C.A.2.b.%' or 
          L04_FS_TEXT LIKE 'C.A.2.c.%') and  
          VERSN = 'AIK0'
   ;
quit;

%let SYSLAST = work.acc2hierarchy;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            Create Formats                        A5V8BXSQ.AW0003CQ * 
 * Transform:       User Written                                            * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   MVBS_PARAMETERS -                     A5V8BXSQ.AE0001YF * 
 *                   RESASDWH.MVBS_PARAMETERS                               * 
 *                  Extract - work.acc2hierarchy          A5V8BXSQ.AQ0001DE * 
 *                  MVBS_REF_SEGMENT -                    A5V8BXSQ.AE0001Z2 * 
 *                   RESASDWH.MVBS_REF_SEGMENT                              * 
 *                  MVBS_REF_OUTSST_BUKRS -               A5V8BXSQ.AE0001YZ * 
 *                   RESASDWH.MVBS_REF_OUTSST_BUKRS                         * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A5V8BXSQ.AW0003CQ);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 4;
%let _INPUT = RESASDWH.MVBS_PARAMETERS;
%let _INPUT_connect =  DBMAX_TEXT=32767 PATH="&ORA_RESASDWH_PATH" user="&ORA_RESASDWH_USER" pw="&ORA_RESASDWH_PWD"
;
%let _INPUT_engine = ORACLE;
%let _INPUT_memtype = DATA;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/ETL/tdbpcd/Tables/Target/MVBS/MVBS_PARAMETERS%(Table%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();
%let _INPUT_filetype = PhysicalTable;

%let _INPUT1 = RESASDWH.MVBS_PARAMETERS;
%let _INPUT1_connect =  DBMAX_TEXT=32767 PATH="&ORA_RESASDWH_PATH" user="&ORA_RESASDWH_USER" pw="&ORA_RESASDWH_PWD"
;
%let _INPUT1_engine = ORACLE;
%let _INPUT1_memtype = DATA;
%let _INPUT1_options = %nrquote();
%let _INPUT1_alter = %nrquote();
%let _INPUT1_path = %nrquote(/ETL/tdbpcd/Tables/Target/MVBS/MVBS_PARAMETERS%(Table%));
%let _INPUT1_type = 1;
%let _INPUT1_label = %nrquote();
%let _INPUT1_filetype = PhysicalTable;

%let _INPUT2 = work.acc2hierarchy;
%let _INPUT2_connect = ;
%let _INPUT2_engine = ;
%let _INPUT2_memtype = DATA;
%let _INPUT2_options = %nrquote();
%let _INPUT2_alter = %nrquote();
%let _INPUT2_path = %nrquote(/Extract_A5V8BXSQ.AQ0001DE%(WorkTable%));
%let _INPUT2_type = 1;
%let _INPUT2_label = %nrquote();
%let _INPUT2_filetype = WorkTable;

%let _INPUT3 = RESASDWH.MVBS_REF_SEGMENT;
%let _INPUT3_connect =  DBMAX_TEXT=32767 PATH="&ORA_RESASDWH_PATH" user="&ORA_RESASDWH_USER" pw="&ORA_RESASDWH_PWD"
;
%let _INPUT3_engine = ORACLE;
%let _INPUT3_memtype = DATA;
%let _INPUT3_options = %nrquote();
%let _INPUT3_alter = %nrquote();
%let _INPUT3_path = %nrquote(/ETL/tdbpcd/Tables/Target/MVBS/MVBS_REF_SEGMENT%(Table%));
%let _INPUT3_type = 1;
%let _INPUT3_label = %nrquote();
%let _INPUT3_filetype = PhysicalTable;

%let _INPUT4 = RESASDWH.MVBS_REF_OUTSST_BUKRS;
%let _INPUT4_connect =  DBMAX_TEXT=32767 PATH="&ORA_RESASDWH_PATH" user="&ORA_RESASDWH_USER" pw="&ORA_RESASDWH_PWD"
;
%let _INPUT4_engine = ORACLE;
%let _INPUT4_memtype = DATA;
%let _INPUT4_options = %nrquote();
%let _INPUT4_alter = %nrquote();
%let _INPUT4_path = %nrquote(/ETL/tdbpcd/Tables/Target/MVBS/MVBS_REF_OUTSST_BUKRS%(Table%));
%let _INPUT4_type = 1;
%let _INPUT4_label = %nrquote();
%let _INPUT4_filetype = PhysicalTable;

%let _OUTPUT_count = 0;
/*---- Start of User Written Code  ----*/ 

proc sql noprint;
  	select PARAMETER_VALUE, input(PARAMETER_VALUE, yymmdd10.) into :act_year_period, :act_period_as_date
	from &_INPUT. where PARAMETER = 'MVBS_RUN_DATE';   /* RESASDWH.MVBS_PARAMETERS */
quit;
%let act_year_period = &act_year_period.;
%let act_period_as_date = &act_period_as_date.;
%let act_reporting_period = Q%sysfunc(qtr(&act_period_as_date.));
%let act_year = %sysfunc(substr(&act_year_period., 1, 4));
%let act_month = %sysfunc(month(&act_period_as_date.));
%let act_month = %sysfunc(putn(&act_month., z2));

data formats(keep=fmtname type start label hlo);
	retain fmtname "ref_bukrs" type "J";
	set &_INPUT4.(rename=(external_key=start internal_key=label)) end=last;   /* RESASDWH.MVBS_REF_OUTSST_BUKRS */
	output;
	if last then do;
		start = "";
		hlo='O';
		label = "-";
		output; 
	end;
run;

proc sort data=formats nodupkey;
	by start;
run;

proc format cntlin=formats;
run;

data formats(keep=fmtname type start label hlo);
	retain fmtname "ref_seg" type "N";
	set &_INPUT3.(rename=(segment_code=label)) end=last;   /* RESASDWH.MVBS_REF_SEGMENT */
	start = input(segment, 8.);
	output;
	if last then do;
		start = .;
		hlo='O';
		label = "-";
		output; 
	end;
run;

proc sort data=formats nodupkey;
	by start;
run;

proc format cntlin=formats;
run;

data formats(keep=fmtname type start label hlo);
	retain fmtname "apc_some" type "J" label "Y";
	set &_INPUT2.(rename=(RACCT=start)) end=last;   /* work.acc2hierarchy */
	output;
	if last then do;
		start = "";
		hlo='O';
		label = "-";
		output; 
	end;
run;

proc sort data=formats nodupkey;
	by start;
run;

proc format cntlin=formats;
run;
/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/**  Step end Create Formats **/

/*==========================================================================* 
 * Step:            Extract                               A5V8BXSQ.AW0003CR * 
 * Transform:       Extract                                                 * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    MIS_APC_DM - RESASDWH.MIS_APC_DM      A5V8BXSQ.AE0001R5 * 
 * Target Table:    MIS_APC_DM - work.MIS_APC_DM          A5V8BXSQ.AQ0001DF * 
 *==========================================================================*/ 

%let transformID = %quote(A5V8BXSQ.AW0003CR);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(RESASDWH.MIS_APC_DM); 

%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete MIS_APC_DM;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.MIS_APC_DM as
      select
         BUKRS,
         WAERS,
         TWBTRG,
         (strip(put(input(SEGMENT, 10.), 8.))) as SEGMENT length = 10
            format = $10.
            informat = $10.
            label = 'SEGMENT',
         MONAT,
         RACCT,
         (input(BUKRS, $ref_bukrs.)) as INTERNAL_KEY length = 20,
         ENTRC,
         ZZFMK1,
         DMBE2
   from &SYSLAST
      where strip(input(bukrs, $ref_bukrs.)) ne "-" and strip(put(input(segment, 10.), ref_seg.)) ne "-" and 
         input(racct , $apc_some.) ne "-" and GJAHR = "&act_year." and RVDM_IS_LEDGER_IFRS='Y' and monat <= "&act_month."
   ;
quit;

%let SYSLAST = work.MIS_APC_DM;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            Join                                  A5V8BXSQ.AW0003CS * 
 * Transform:       Join                                                    * 
 * Description:     Extraction of APC data                                  * 
 *                                                                          * 
 * Source Tables:   MIS_APC_DM - work.MIS_APC_DM          A5V8BXSQ.AQ0001DF * 
 *                  Extract - work.acc2hierarchy          A5V8BXSQ.AQ0001DE * 
 *                  MVBS_REF_BC_SEG_CONSUNIT -            A5V8BXSQ.AE0001YU * 
 *                   RESASDWH.MVBS_REF_BC_SEG_CONSUNIT                      * 
 *                  META_APC_S002_GL_ACT_ID -             A5V8BXSQ.AE0001R3 * 
 *                   RESASDWH.META_APC_S002_GL_ACT_ID                       * 
 * Target Table:    Join - work.MVBS_INPUT_APC            A5V8BXSQ.AQ0001DG * 
 *==========================================================================*/ 

%let transformID = %quote(A5V8BXSQ.AW0003CS);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete MVBS_INPUT_APC;
quit;

proc sql;
   create table work.MVBS_INPUT_APC as
   select
      "&reporting_period." as REPORTING_PERIOD length = 8,
      MIS_APC_DM.SEGMENT length = 10,
      strip(MVBS_REF_BC_SEG_CONSUNIT.REINS_CONS_UNIT_ID) as LEGAL_ENTITY_CODE length = 6,
      MIS_APC_DM.INTERNAL_KEY as BC_ID length = 20,
      MIS_APC_DM.WAERS as CURRENCY length = 5,
      acc2hierarchy.L02_FS_TEXT length = 100   
         format = $100.
         informat = $100.,
      acc2hierarchy.L03_FS_TEXT length = 100   
         format = $100.
         informat = $100.,
      acc2hierarchy.L04_FS_TEXT length = 100   
         format = $100.
         informat = $100.,
      MIS_APC_DM.ZZFMK1 length = 6   
         format = $6.
         informat = $6.,
      sum(case   
      when  (acc2hierarchy.L04_FS_TEXT like 'C.A.1.b.%' or 
                  acc2hierarchy.L04_FS_TEXT like 'C.A.2.b.%') 
        then  MIS_APC_DM.TWBTRG   else  0 
      end) as AMOUNT_EPR length = 8,
      sum(case    
        when  (acc2hierarchy.L04_FS_TEXT like 'C.A.1.b.%' or  
                    acc2hierarchy.L04_FS_TEXT like 'C.A.2.b.%' or  
                    acc2hierarchy.L04_FS_TEXT like 'C.A.1.c.%' or  
                    acc2hierarchy.L04_FS_TEXT like 'C.A.2.c.%')  
        then  MIS_APC_DM.TWBTRG   else  0  
      end) as AMOUNT_NET_EPR length = 8,
      sum(case   
        when  (acc2hierarchy.L04_FS_TEXT like 'C.A.1.b.%') 
        then  MIS_APC_DM.TWBTRG   else  0 
      end) as AMOUNT_WPPFEW length = 8,
      sum(case    
        when  (acc2hierarchy.L04_FS_TEXT like 'C.A.1.b.%' or  
                    acc2hierarchy.L04_FS_TEXT like 'C.A.1.c.%')  
        then  MIS_APC_DM.TWBTRG   else  0  
      end) as AMOUNT_NET_WPPFEW length = 8,
      sum(case   
        when  (acc2hierarchy.L04_FS_TEXT like 'C.H.1.a.%') 
        THEN MIS_APC_DM.TWBTRG     ELSE  0    
       END) as AMOUNT_PAYMENTS_GROSS length = 8,
      sum(case   
        when  (acc2hierarchy.L04_FS_TEXT like 'C.H.1.a.%' or acc2hierarchy.L04_FS_TEXT like 'C.H.2.a.%') 
        THEN MIS_APC_DM.TWBTRG     ELSE  0    
       END) as AMOUNT_PAYMENTS_NET length = 8,
      sum(case   
        when (acc2hierarchy.L03_FS_TEXT like 'P.D.1.%' or acc2hierarchy.L03_FS_TEXT like 'P.D.2.%' or 
              (acc2hierarchy.L03_FS_TEXT like 'P.E.1.%' and MIS_APC_DM.ENTRC in ('0903', 'I903', 'I936', '0913', 'I913', '0914', 'I914', '0924', 'I924')))
        and strip( V_META_APC_S002_GL_ACT_ID.LEVEL1 ) ne 'IBNR' 
        THEN MIS_APC_DM.TWBTRG     ELSE  0    
       END) as AMOUNT_CASERES_GROSS length = 8,
      sum(case   
        when  (acc2hierarchy.L03_FS_TEXT like 'P.D.1.%' or acc2hierarchy.L03_FS_TEXT like 'P.D.2.%' or 
               acc2hierarchy.L04_FS_TEXT like 'A.F.2.a.%' or acc2hierarchy.L04_FS_TEXT like 'A.F.2.b.%' or 
               ((acc2hierarchy.L03_FS_TEXT like 'P.E.1.%' or acc2hierarchy.L04_FS_TEXT like 'A.F.3.a.%') and MIS_APC_DM.ENTRC in ('0903', 'I903', 'I936', '0913', 'I913', '0914', 'I914', '0924', 'I924')))
        and strip(V_META_APC_S002_GL_ACT_ID.LEVEL1) ne 'IBNR' 
        THEN MIS_APC_DM.TWBTRG     ELSE  0    
       END) as AMOUNT_CASERES_NET length = 8,
      sum(case 
         when acc2hierarchy.L02_FS_TEXT like 'P.C.%' then  MIS_APC_DM.TWBTRG 
         else  0 
      end) as AMOUNT_UPRE length = 8,
      sum(case 
         when acc2hierarchy.L02_FS_TEXT like 'P.C.%'  or 
            acc2hierarchy.L03_FS_TEXT like 'A.F.1.%' then  MIS_APC_DM.TWBTRG 
         else  0 
      end) as AMOUNT_NET_UPRE length = 8,
      sum(MIS_APC_DM.DMBE2) as DMBE2 length = 8
   from
      work.MIS_APC_DM as MIS_APC_DM inner join 
      work.acc2hierarchy as acc2hierarchy
         on
         (
            MIS_APC_DM.RACCT = acc2hierarchy.RACCT
         ) inner join 
      RESASDWH.MVBS_REF_BC_SEG_CONSUNIT as MVBS_REF_BC_SEG_CONSUNIT
         on
         (
            MIS_APC_DM.SEGMENT = MVBS_REF_BC_SEG_CONSUNIT.SEGMENT
            and MIS_APC_DM.INTERNAL_KEY = MVBS_REF_BC_SEG_CONSUNIT.BC_ID
         ) left join 
      RESASDWH.META_APC_S002_GL_ACT_ID as V_META_APC_S002_GL_ACT_ID
         on
         (
            MIS_APC_DM.RACCT = V_META_APC_S002_GL_ACT_ID.RACCT
            and upper(V_META_APC_S002_GL_ACT_ID.REPORT) = 'APC'
            and upper(V_META_APC_S002_GL_ACT_ID.VARIANT) = 'IBNR'
         )
   group by
      LEGAL_ENTITY_CODE,
      MIS_APC_DM.INTERNAL_KEY,
      CURRENCY,
      MIS_APC_DM.SEGMENT,
      L02_FS_TEXT,
      L03_FS_TEXT,
      L04_FS_TEXT,
      ZZFMK1
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Join **/

/*==========================================================================* 
 * Step:            Table Loader                          A5V8BXSQ.AW0003CT * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Join - work.MVBS_INPUT_APC            A5V8BXSQ.AQ0001DG * 
 * Target Table:    MVBS_INPUT_APC -                      A5V8BXSQ.AE0001VR * 
 *                   RESASDWH.MVBS_INPUT_APC                                * 
 *==========================================================================*/ 

%let transformID = %quote(A5V8BXSQ.AW0003CT);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.MVBS_INPUT_APC); 

%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: AppendToExisting - AppendProc
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Set the Load Time column  ----*/ 
   %let etls_jobLoadTime = &SYSDATE9.:&SYSTIME;
   %let etls_loadTime = &etls_jobLoadTime; 
   data _null_;
      _loadtime = input("&etls_LoadTime",DATETIME20.);
      put "NOTE: The load time is: " _loadtime nldatm.;
   run;
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete W3B316EN;
   quit;
   
   data work.W3B316EN / view=work.W3B316EN;
      set &SYSLAST (&etls_tableOptions);
      LOAD_TIMESTAMP = "&etls_LoadTime"dt;
   run;
   
   %rcSet(&syserr); 
   
   %let SYSLAST = work.W3B316EN;
   %let etls_lastTable = &SYSLAST; 
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete W3B316EP;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.W3B316EP as
         select
            REPORTING_PERIOD   
               format = $8.
               informat = $8.,
            LEGAL_ENTITY_CODE   
               format = $6.
               informat = $6.,
            SEGMENT   
               format = $10.
               informat = $10.,
            BC_ID   
               format = $20.
               informat = $20.,
            CURRENCY   
               format = $5.
               informat = $5.,
            L02_FS_TEXT,
            L03_FS_TEXT,
            L04_FS_TEXT,
            ZZFMK1,
            AMOUNT_EPR,
            AMOUNT_NET_EPR,
            AMOUNT_WPPFEW,
            AMOUNT_NET_WPPFEW,
            AMOUNT_PAYMENTS_GROSS,
            AMOUNT_PAYMENTS_NET,
            AMOUNT_CASERES_GROSS,
            AMOUNT_CASERES_NET,
            AMOUNT_UPRE,
            AMOUNT_NET_UPRE,
            DMBE2,
            (&version_id.) as VERSION_ID length = 8,
            LOAD_TIMESTAMP
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.W3B316EP;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(RESASDWH.MVBS_INPUT_APC, DATA)) or 
         %sysfunc(exist(RESASDWH.MVBS_INPUT_APC, VIEW))); 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data RESASDWH.MVBS_INPUT_APC
              (insertbuff=1000
               dbnull = (
                         REPORTING_PERIOD = YES
                         LEGAL_ENTITY_CODE = YES
                         SEGMENT = YES
                         BC_ID = YES
                         CURRENCY = YES
                         L02_FS_TEXT = YES
                         L03_FS_TEXT = YES
                         L04_FS_TEXT = YES
                         ZZFMK1 = YES
                         AMOUNT_EPR = YES
                         AMOUNT_NET_EPR = YES
                         AMOUNT_WPPFEW = YES
                         AMOUNT_NET_WPPFEW = YES
                         AMOUNT_PAYMENTS_GROSS = YES
                         AMOUNT_PAYMENTS_NET = YES
                         AMOUNT_CASERES_GROSS = YES
                         AMOUNT_CASERES_NET = YES
                         AMOUNT_UPRE = YES
                         AMOUNT_NET_UPRE = YES
                         DMBE2 = YES
                         VERSION_ID = YES
                         LOAD_TIMESTAMP = YES));
         attrib REPORTING_PERIOD length = $8
            format = $8.
            informat = $8.
            label = 'REPORTING_PERIOD'; 
         attrib LEGAL_ENTITY_CODE length = $6
            format = $6.
            informat = $6.
            label = 'LEGAL_ENTITY_CODE'; 
         attrib SEGMENT length = $10
            format = $10.
            informat = $10.
            label = 'SEGMENT'; 
         attrib BC_ID length = $20
            format = $20.
            informat = $20.
            label = 'BC_ID'; 
         attrib CURRENCY length = $5
            format = $5.
            informat = $5.
            label = 'CURRENCY'; 
         attrib L02_FS_TEXT length = $100
            format = $100.
            informat = $100.
            label = 'L02_FS_TEXT'; 
         attrib L03_FS_TEXT length = $100
            format = $100.
            informat = $100.
            label = 'L03_FS_TEXT'; 
         attrib L04_FS_TEXT length = $100
            format = $100.
            informat = $100.
            label = 'L04_FS_TEXT'; 
         attrib ZZFMK1 length = $6
            format = $6.
            informat = $6.
            label = 'ZZFMK1'; 
         attrib AMOUNT_EPR length = 8
            label = 'AMOUNT_EPR'; 
         attrib AMOUNT_NET_EPR length = 8
            label = 'AMOUNT_NET_EPR'; 
         attrib AMOUNT_WPPFEW length = 8
            label = 'AMOUNT_WPPFEW'; 
         attrib AMOUNT_NET_WPPFEW length = 8
            label = 'AMOUNT_NET_WPPFEW'; 
         attrib AMOUNT_PAYMENTS_GROSS length = 8
            label = 'AMOUNT_PAYMENTS_GROSS'; 
         attrib AMOUNT_PAYMENTS_NET length = 8
            label = 'AMOUNT_PAYMENTS_NET'; 
         attrib AMOUNT_CASERES_GROSS length = 8
            label = 'AMOUNT_CASERES_GROSS'; 
         attrib AMOUNT_CASERES_NET length = 8
            label = 'AMOUNT_CASERES_NET'; 
         attrib AMOUNT_UPRE length = 8
            label = 'AMOUNT_UPRE'; 
         attrib AMOUNT_NET_UPRE length = 8
            label = 'AMOUNT_NET_UPRE'; 
         attrib DMBE2 length = 8
            label = 'DMBE2'; 
         attrib VERSION_ID length = 8
            label = 'VERSION_ID'; 
         attrib LOAD_TIMESTAMP length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'LOAD_TIMESTAMP'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = RESASDWH.MVBS_INPUT_APC( insertbuff=1000) 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete W3B316EP;
   quit;
   
%mend etls_loader;
%etls_loader;



/**  Step end Table Loader **/

%let etls_endTime = %sysfunc(datetime(),datetime.);

/* Check return code for job  */ 
%macro etls_jobRCChk; 
   %if (&job_rc ge 5) %then
   %do; 
      %macro etls_sendEmail(address=, message=); 
      
         filename sendMail email "&address" subject='ETL Process Status'; 
      
         %local etls_syntaxcheck; 
         %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
         /* Turn off syntaxcheck option to perform following steps  */ 
         options nosyntaxcheck;
      
         data _null_; 
            file sendMail; 
            dttm = put(datetime(),nldatm.); 
            put dttm "&message."; 
         run; 
      
         /* Reset syntaxcheck option to previous setting  */ 
         options &etls_syntaxcheck; 
      %mend etls_sendEmail; 
      %etls_sendEmail 
         (address = &mail_to, 
          Message = %str(&etls_jobName Error auf &run_system : Error%%superq%(syserrortext%))); 
   %end; 
%mend etls_jobRCChk; 
%etls_jobRCChk; 

/* Check return code for job  */ 
%macro etls_jobRCChk; 
   %if (&job_rc ge 5) %then
   %do; 
      %macro etls_sendFile(directory=, filename=, message=); 
      
         filename sendfile "&directory.&filename"; 
      
         %local etls_syntaxcheck; 
         %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
         /* Turn off syntaxcheck option to perform following steps  */ 
         options nosyntaxcheck;
      
         data _null_; 
            file sendFile; 
            dttm = put(datetime(),nldatm.); 
            put dttm "&message."; 
         run; 
      
         /* Reset syntaxcheck option to previous setting  */ 
         options &etls_syntaxcheck; 
      %mend etls_sendFile; 
      %etls_sendFile 
         (FileName = &proj_env./run_control/mvbs_error_&etls_jobName, 
          Message = Error); 
   %end; 
%mend etls_jobRCChk; 
%etls_jobRCChk; 

