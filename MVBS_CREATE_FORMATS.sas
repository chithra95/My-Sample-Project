/**************************************************************************** 
 * Job:             MVBS_CREATE_FORMATS                   A5V8BXSQ.AR0001AX * 
 * Description:                                                             * 
 *                                                                          * 
 * Metadata Server: bire-sas94-meta-dev.srv.allianz                         * 
 * Port:            8561                                                    * 
 * Location:        /ETL/tdbpcd/Jobs/MVBS/MVBS_INPUT (DWH & MIS)            * 
 *                                                                          * 
 * Server:          tdbpcd                                A5HYR2NS.AS00001O * 
 *                                                                          * 
 * Source Tables:   META_MVBS_VALID_VALUES -              A5V8BXSQ.AE0001UQ * 
 *                   RESASDWH.META_MVBS_VALID_VALUES                        * 
 *                  META_MVBS_MT_COUNTRY_TRI -            A5V8BXSQ.AE0001U7 * 
 *                   RESASDWH.META_MVBS_MT_COUNTRY_TRI                      * 
 *                  MVBS_DIM_LEGAL_AREA -                 A5V8BXSQ.AE0001VN * 
 *                   RESASDWH.MVBS_DIM_LEGAL_AREA                           * 
 *                  META_MVBS_COUNTRY_REGION -            A5V8BXSQ.AE0001TZ * 
 *                   RESASDWH.META_MVBS_COUNTRY_REGION                      * 
 *                  META_MVBS_SCOB_CONV_SCOB -            A5V8BXSQ.AE0001UH * 
 *                   RESASDWH.META_MVBS_SCOB_CONV_SCOB                      * 
 *                  META_MVBS_LOB_MAPPING -               A5V8BXSQ.AE0001U5 * 
 *                   RESASDWH.META_MVBS_LOB_MAPPING                         * 
 *                  META_MVBS_CURR_SET -                  A5V8BXSQ.AE0001U1 * 
 *                   RESASDWH.META_MVBS_CURR_SET                            * 
 *                  MVBS_EXCHANGE_RATE -                  A5V8BXSQ.AE0001VQ * 
 *                   RESASDWH.MVBS_EXCHANGE_RATE                            * 
 *                                                                          * 
 * Generated on:    Tuesday, January 24, 2017 3:32:39 PM IST                * 
 * Generated by:    re00580                                                 * 
 * Version:         SAS Data Integration Studio 4.901                       * 
 ****************************************************************************/ 

/* Generate the process id for job  */ 
%put Process ID: &SYSJOBID;

/* General macro variables  */ 
%let jobID = %quote(A5V8BXSQ.AR0001AX);
%let etls_jobName = %nrquote(MVBS_CREATE_FORMATS);
%let etls_userID = %nrquote(re00580);

/* Setup to capture return codes  */ 
%global job_rc trans_rc sqlrc;
%let sysrc = 0;
%let job_rc = 0;
%let trans_rc = 0;
%let sqlrc = 0;
%global etls_stepStartTime; 
/* initialize syserr to 0 */
data _null_; run;

%macro rcSet(error); 
   %if (&error gt &trans_rc) %then 
      %let trans_rc = &error;
   %if (&error gt &job_rc) %then 
      %let job_rc = &error;
%mend rcSet; 

%macro rcSetDS(error); 
   if &error gt input(symget('trans_rc'),12.) then 
      call symput('trans_rc',trim(left(put(&error,12.))));
   if &error gt input(symget('job_rc'),12.) then 
      call symput('job_rc',trim(left(put(&error,12.))));
%mend rcSetDS; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*==========================================================================* 
 * Step:            Create Formats                        A5V8BXSQ.AW0003CU * 
 * Transform:       User Written                                            * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   META_MVBS_VALID_VALUES -              A5V8BXSQ.AE0001UQ * 
 *                   RESASDWH.META_MVBS_VALID_VALUES                        * 
 *                  META_MVBS_MT_COUNTRY_TRI -            A5V8BXSQ.AE0001U7 * 
 *                   RESASDWH.META_MVBS_MT_COUNTRY_TRI                      * 
 *                  MVBS_DIM_LEGAL_AREA -                 A5V8BXSQ.AE0001VN * 
 *                   RESASDWH.MVBS_DIM_LEGAL_AREA                           * 
 *                  META_MVBS_COUNTRY_REGION -            A5V8BXSQ.AE0001TZ * 
 *                   RESASDWH.META_MVBS_COUNTRY_REGION                      * 
 *                  META_MVBS_SCOB_CONV_SCOB -            A5V8BXSQ.AE0001UH * 
 *                   RESASDWH.META_MVBS_SCOB_CONV_SCOB                      * 
 *                  META_MVBS_LOB_MAPPING -               A5V8BXSQ.AE0001U5 * 
 *                   RESASDWH.META_MVBS_LOB_MAPPING                         * 
 *                  META_MVBS_CURR_SET -                  A5V8BXSQ.AE0001U1 * 
 *                   RESASDWH.META_MVBS_CURR_SET                            * 
 *                  MVBS_EXCHANGE_RATE -                  A5V8BXSQ.AE0001VQ * 
 *                   RESASDWH.MVBS_EXCHANGE_RATE                            * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A5V8BXSQ.AW0003CU);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 8;
%let _INPUT = RESASDWH.META_MVBS_VALID_VALUES;
%let _INPUT_connect =  DBMAX_TEXT=32767 PATH="&ORA_RESASDWH_PATH" user="&ORA_RESASDWH_USER" pw="&ORA_RESASDWH_PWD"
;
%let _INPUT_engine = ORACLE;
%let _INPUT_memtype = DATA;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/ETL/tdbpcd/Tables/Target/META/META_MVBS_VALID_VALUES%(Table%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();
%let _INPUT_filetype = PhysicalTable;

%let _INPUT1 = RESASDWH.META_MVBS_VALID_VALUES;
%let _INPUT1_connect =  DBMAX_TEXT=32767 PATH="&ORA_RESASDWH_PATH" user="&ORA_RESASDWH_USER" pw="&ORA_RESASDWH_PWD"
;
%let _INPUT1_engine = ORACLE;
%let _INPUT1_memtype = DATA;
%let _INPUT1_options = %nrquote();
%let _INPUT1_alter = %nrquote();
%let _INPUT1_path = %nrquote(/ETL/tdbpcd/Tables/Target/META/META_MVBS_VALID_VALUES%(Table%));
%let _INPUT1_type = 1;
%let _INPUT1_label = %nrquote();
%let _INPUT1_filetype = PhysicalTable;

%let _INPUT2 = RESASDWH.META_MVBS_MT_COUNTRY_TRI;
%let _INPUT2_connect =  DBMAX_TEXT=32767 PATH="&ORA_RESASDWH_PATH" user="&ORA_RESASDWH_USER" pw="&ORA_RESASDWH_PWD"
;
%let _INPUT2_engine = ORACLE;
%let _INPUT2_memtype = DATA;
%let _INPUT2_options = %nrquote();
%let _INPUT2_alter = %nrquote();
%let _INPUT2_path = %nrquote(/ETL/tdbpcd/Tables/Target/META/META_MVBS_MT_COUNTRY_TRI%(Table%));
%let _INPUT2_type = 1;
%let _INPUT2_label = %nrquote();
%let _INPUT2_filetype = PhysicalTable;

%let _INPUT3 = RESASDWH.MVBS_DIM_LEGAL_AREA;
%let _INPUT3_connect =  DBMAX_TEXT=32767 PATH="&ORA_RESASDWH_PATH" user="&ORA_RESASDWH_USER" pw="&ORA_RESASDWH_PWD"
;
%let _INPUT3_engine = ORACLE;
%let _INPUT3_memtype = DATA;
%let _INPUT3_options = %nrquote();
%let _INPUT3_alter = %nrquote();
%let _INPUT3_path = %nrquote(/ETL/tdbpcd/Tables/Target/MVBS/MVBS_DIM_LEGAL_AREA%(Table%));
%let _INPUT3_type = 1;
%let _INPUT3_label = %nrquote();
%let _INPUT3_filetype = PhysicalTable;

%let _INPUT4 = RESASDWH.META_MVBS_COUNTRY_REGION;
%let _INPUT4_connect =  DBMAX_TEXT=32767 PATH="&ORA_RESASDWH_PATH" user="&ORA_RESASDWH_USER" pw="&ORA_RESASDWH_PWD"
;
%let _INPUT4_engine = ORACLE;
%let _INPUT4_memtype = DATA;
%let _INPUT4_options = %nrquote();
%let _INPUT4_alter = %nrquote();
%let _INPUT4_path = %nrquote(/ETL/tdbpcd/Tables/Target/META/META_MVBS_COUNTRY_REGION%(Table%));
%let _INPUT4_type = 1;
%let _INPUT4_label = %nrquote();
%let _INPUT4_filetype = PhysicalTable;

%let _INPUT5 = RESASDWH.META_MVBS_SCOB_CONV_SCOB;
%let _INPUT5_connect =  DBMAX_TEXT=32767 PATH="&ORA_RESASDWH_PATH" user="&ORA_RESASDWH_USER" pw="&ORA_RESASDWH_PWD"
;
%let _INPUT5_engine = ORACLE;
%let _INPUT5_memtype = DATA;
%let _INPUT5_options = %nrquote();
%let _INPUT5_alter = %nrquote();
%let _INPUT5_path = %nrquote(/ETL/tdbpcd/Tables/Target/META/META_MVBS_SCOB_CONV_SCOB%(Table%));
%let _INPUT5_type = 1;
%let _INPUT5_label = %nrquote();
%let _INPUT5_filetype = PhysicalTable;

%let _INPUT6 = RESASDWH.META_MVBS_LOB_MAPPING;
%let _INPUT6_connect =  DBMAX_TEXT=32767 PATH="&ORA_RESASDWH_PATH" user="&ORA_RESASDWH_USER" pw="&ORA_RESASDWH_PWD"
;
%let _INPUT6_engine = ORACLE;
%let _INPUT6_memtype = DATA;
%let _INPUT6_options = %nrquote();
%let _INPUT6_alter = %nrquote();
%let _INPUT6_path = %nrquote(/ETL/tdbpcd/Tables/Target/META/META_MVBS_LOB_MAPPING%(Table%));
%let _INPUT6_type = 1;
%let _INPUT6_label = %nrquote();
%let _INPUT6_filetype = PhysicalTable;

%let _INPUT7 = RESASDWH.META_MVBS_CURR_SET;
%let _INPUT7_connect =  DBMAX_TEXT=32767 PATH="&ORA_RESASDWH_PATH" user="&ORA_RESASDWH_USER" pw="&ORA_RESASDWH_PWD"
;
%let _INPUT7_engine = ORACLE;
%let _INPUT7_memtype = DATA;
%let _INPUT7_options = %nrquote();
%let _INPUT7_alter = %nrquote();
%let _INPUT7_path = %nrquote(/ETL/tdbpcd/Tables/Target/META/META_MVBS_CURR_SET%(Table%));
%let _INPUT7_type = 1;
%let _INPUT7_label = %nrquote();
%let _INPUT7_filetype = PhysicalTable;

%let _INPUT8 = RESASDWH.MVBS_EXCHANGE_RATE;
%let _INPUT8_connect =  DBMAX_TEXT=32767 PATH="&ORA_RESASDWH_PATH" user="&ORA_RESASDWH_USER" pw="&ORA_RESASDWH_PWD"
;
%let _INPUT8_engine = ORACLE;
%let _INPUT8_memtype = DATA;
%let _INPUT8_options = %nrquote();
%let _INPUT8_alter = %nrquote();
%let _INPUT8_path = %nrquote(/ETL/tdbpcd/Tables/Target/MVBS/MVBS_EXCHANGE_RATE%(Table%));
%let _INPUT8_type = 1;
%let _INPUT8_label = %nrquote();
%let _INPUT8_filetype = PhysicalTable;

%let _OUTPUT_count = 0;
/*---- Start of User Written Code  ----*/ 

/* Create a set of formats for automatically converting in values (usually in upper case) to proper out values (usually mix case) */
data formats(keep=fmtname start label);
    length fmtname $32;
    set &_INPUT1.(rename=(in_value=start out_value=label));  /* RESASDWH.META_MVBS_VALID_VALUES */

    fmtname = '$' || strip(column_name);
    /* Format names ending with a digit are invalid. In this case simply add an "f". */
    if notdigit(fmtname, -length(fmtname)) < length(fmtname) then
        fmtname = strip(fmtname) || 'f';
run;

proc sort data=formats nodupkey;
    by fmtname start;
run;

proc format cntlin=formats;
run;

/* Create a format for overriding the country information. The aim is to reduce the amount of (triangular) data that is provided to TechDB. */
data formats(keep=fmtname start label hlo);
    retain fmtname "$country_techdb";
    set &_INPUT2.(rename=(country_code=start country_techdb=label)) end=last;  /* RESASDWH.META_MVBS_MT_COUNTRY_TRI */
    output;
    if last then do;
        start = "";
        hlo='O';
        label = "";
        output; 
    end;
run;

proc sort data=formats nodupkey;
    by start;
run;

proc format cntlin=formats;
run;


data formats(keep=fmtname type start label hlo);
    retain fmtname "iso3to2conv" type "J";
    set &_INPUT3.(rename=(iso_alpha_3=start iso_alpha_2=label) where=(start is not null)) end=last;  /* RESASDWH.MVBS_DIM_LEGAl_AREA */
    if strip(label) = '99' then label = '0E';
    output;
    if last then do;
        start = "";
        hlo='O';
        label = "";
        output; 
    end;
run;

proc sort data=formats nodupkey;
    by start;
run;

proc format cntlin=formats;
run;

data formats(keep=fmtname type start label hlo);
    retain fmtname "region_abbreviation" type "J";
    set &_INPUT4.(rename=(country_code=start region_abbreviation=label)) end=last;  /* RESASDWH.META_MVBS_COUNTRY_REGION */
    output;
    if last then do;
        start = "";
        hlo='O';
        label = "";
        output; 
    end;
run;

proc sort data=formats nodupkey;
    by start;
run;

proc format cntlin=formats;
run;

data formats(keep=fmtname start label hlo);
    retain fmtname "$scob_conv_scob";
    set &_INPUT5.(rename=(scob=start CONV_SCOB=label)) end=last;  /* RESASDWH.META_MVBS_SCOB_CONV_SCOB */
    output;
    if last then do;
        start = "";
        hlo='O';
        label = "";
        output; 
    end;
run;

proc sort data=formats nodupkey;
    by start;
run;

proc format cntlin=formats;
run;

proc sql noprint;
    create table LH_scob as
    select SCOB.SCOB 
    from &_INPUT6. lob,  /* RESASDWH.META_MVBS_LOB_MAPPING */
			&_INPUT5. scob  /* RESASDWH.META_MVBS_SCOB_CONV_SCOB */
    where SCOB.CONV_SCOB = LOB.CONV_SCOB      
    and trim(LOB.SUPER_LOB) in ('1', '2', '3')
     and ANNUITIES_FLAG='N';;
quit;


data formats(keep=fmtname start label);
    retain fmtname "$scob_code" label "HE01";
    set LH_scob(rename=(scob=start));
run;

proc sort data=formats nodupkey;
    by start;
run;

proc format cntlin=formats;
run;

data formats(keep=fmtname type start label hlo);
    retain type "J";
    length fmtname $20;
    set &_INPUT7.(rename=(currency_set=start)) end=last;  /* RESASDWH.META_MVBS_CURR_SET */
    label = start;
    fmtname = "curr_set";
    output;
    fmtname = "curr_check";
    output;
    if last then do;
        start = "";
        hlo='O';
        label = "EUR";
        fmtname = "curr_set";
        output;
        fmtname = "curr_check";        
        label = "";
        output; 
    end;
run;

proc sort data=formats nodupkey;
    by fmtname start;
run;

proc format cntlin=formats;
run;


%global MT_CURR;
%global NWORDS;



proc sql;
   create table exchange_rates as
      select
         CASE WHEN CATEGORY eq 'QA' then 
             compress('QA_' || CURR2) else CURR2 end  as CURR_ID,
         (INPUT(FROM_TIME ,yymmdd8.)) as TIME_FROM length = 8
            format = date9.
            label = 'TIME_FROM',
         (INPUT(TO_TIME ,yymmdd8.)) as TIME_TO length = 8
            format = date9.
            label = 'TIME_TO',
         RATE,
         CATEGORY as CAT_ID
   from &_INPUT8.  /* RESASDWH.MVBS_EXCHANGE_RATE */
      where  CURR1 = 'EUR'
    order by CURR_ID;
quit;


Data EUR_TO_CURR  ;
   Set exchange_rates (rename=(
        TIME_FROM = start
        TIME_TO   = end    
        RATE      = label
        CURR_ID   = fmtname
        ));
    by fmtname;

    type = 'I';
    start=strip(start);
    end=strip(end);
    output;
    if last.fmtname  then do; 
        hlo='O'; label=.; 

    end;
run;


Proc sort Data=EUR_TO_CURR ;by fmtname start;Run;

Proc format library=work.formats cntlin=EUR_TO_CURR;Run;


proc sql noprint;
    create table currs as select distinct fmtname as start, 1 as label, cat_id as cat from work.EUR_TO_CURR;
quit;



data formats(keep=fmtname type start label hlo);
    retain fmtname "cexist" type "I";
    set currs (where=(cat='DR')) end=last;
    output;
    if last then do;
        start = "";
        hlo='O';
        label = 0;
        output; 
    end;
run;

proc sort data=formats nodupkey;by start;run;

proc format cntlin=formats; run;

data formats(keep=fmtname type start label hlo);
    retain fmtname "qexist" type "I";
    set currs (where=(cat='QA')) end=last;
    output;
    if last then do;
        start = "";
        hlo='O';
        label = 0;
        output; 
    end;
run;

proc sort data=formats nodupkey;    by start; run;

proc format cntlin=formats;run;
   

Proc fcmp outlib=work.functions.curr_convertion;

    function curr_rate (curr_in $, curr_out $, date $);

      if input(curr_in, cexist.) = 0 or input(curr_out, cexist.) = 0 then        
            rate = 0;
        else if curr_in = curr_out then
            rate = 1;
        else if curr_out = "EUR" then do;
            calc_in = inputn(date,curr_in);
            if missing(calc_in) then rate = 0;
            else rate = 1/calc_in;
        end;
        else if curr_out ne "EUR" then do;
            if curr_in = "EUR" then calc_in = 1;
            else calc_in = inputn(date,curr_in);
            calc_out = inputn(date,curr_out);
            if missing(calc_in) or missing(calc_out) then rate = 0;
            else rate = calc_out/calc_in;
        end;
        return (rate);
    endsub;



function qa_curr_rate(curr_in $, curr_out $, date $);

      if input(compress('QA_'||curr_in), qexist.) = 0 or input(compress('QA_'||curr_out), qexist.) = 0 then        
            rate = 0;
        else if compress('QA_'||curr_in) = compress('QA_'||curr_out) then
            rate = 1;
        else if curr_out = "EUR" then do;
            calc_in = inputn(date,compress('QA_'||curr_in));
            if missing(calc_in) then rate = 0;
            else rate = 1/calc_in;
        end;
        else if curr_out ne "EUR" then do;
            if curr_in = "EUR" then calc_in = 1;
            else calc_in = inputn(date,compress('QA_'||curr_in));
            calc_out = inputn(date,compress('QA_'||curr_out));
            if missing(calc_in) or missing(calc_out) then rate = 0;
            else rate = calc_out/calc_in;
        end;
        return (rate);
    endsub;
run;



OPTIONS CMPLIB=work.functions;

/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/**  Step end Create Formats **/

%let etls_endTime = %sysfunc(datetime(),datetime.);

